
class_evaluation <- function(new_data, model, true_y, type = "class", digits = 3,logi = FALSE, cutoff = 0.5){
  
  # Predikterar klassen för new_data givet den skattade modellen
  if(any(str_detect(class(model), pattern = "keras"))){
    pred <- predict_classes(model, new_data)  
  } else {

    pred <- predict(model, newdata = new_data, type = type)  
   
  }
  
  # Konverterar de predikterade klasserna till en faktor med samma nivåer som de sanna klasserna
  if(logi == FALSE){
  pred <- factor(pred, levels = levels(factor(true_y)))
  }else{
  pred <- ifelse(pred >cutoff, "nej", "ja")
  }
  
  # Skapar förväxlingsmatris med rader som indikerar sanna klassen och kolumnen som indikerar predikterade klassen
  confusion <- table(true_y, pred)
  
  # Träffsäkerhet är antalet korrekta prediktioner dividerat med antalet observationer
  accuracy <- sum(diag(confusion)) / sum(confusion)
  
  # Felkvoten är 1 - träffsäkerheten
  misclass <- 1 - accuracy
 
  # Sensitivitet är antalet korrekta prediktioner AV DEN NUVARANDE KLASSEN dividerat med antalet observationer AV DEN NUVARANDE KLASSEN
  sensitivity <- diag(confusion) / rowSums(confusion) 
  
  # Specificitet är antalet korrekta prediktioner AV ICKE DEN NUVARANDE KLASSEN dividerat med antalet observationer AV ICKE DEN NUVARANDE KLASSEN
 
  specificity <- NULL
  for(i in 1:nrow(confusion)){
     specificity[i] <- sum(confusion[-i, -i])/sum(confusion[-i, ])
  }

  # Sammanställer alla resultat i en egen lista som sedan returneras
  evaluation <- list(confusion_matrix = confusion, 
                     overall = 
                       cbind(acc = accuracy, 
                             mis = misclass),
                     class_wise = 
                       rbind(sensitivity = round(sensitivity, digits = digits),
                             specificity = round(specificity, digits = digits))
                     )
  
  return(evaluation)
}
